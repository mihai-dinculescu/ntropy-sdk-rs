/*
 * Ntropy Transaction API
 *
 * The world's most powerful, multi-geo, multi-lingual transaction categorization API.
 *
 * The version of the OpenAPI document:
 * Contact: api@ntropy.com
 * Generated by: https://openapi-generator.tech
 */

/// IncomeGroup : Represents one source of income as defined by the provided group of transactions

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct IncomeGroup {
    #[serde(rename = "amount", skip_serializing_if = "Option::is_none")]
    pub amount: Option<f32>,
    #[serde(rename = "source", skip_serializing_if = "Option::is_none")]
    pub source: Option<String>,
    #[serde(rename = "income_type", skip_serializing_if = "Option::is_none")]
    pub income_type: Option<IncomeType>,
    #[serde(rename = "first_payment_date", skip_serializing_if = "Option::is_none")]
    pub first_payment_date: Option<String>,
    #[serde(
        rename = "latest_payment_date",
        skip_serializing_if = "Option::is_none"
    )]
    pub latest_payment_date: Option<String>,
    #[serde(rename = "transaction_ids", skip_serializing_if = "Option::is_none")]
    pub transaction_ids: Option<Vec<String>>,
    #[serde(rename = "pay_frequency", skip_serializing_if = "Option::is_none")]
    pub pay_frequency: Option<String>,
}

impl IncomeGroup {
    /// Represents one source of income as defined by the provided group of transactions
    pub fn new() -> IncomeGroup {
        IncomeGroup {
            amount: None,
            source: None,
            income_type: None,
            first_payment_date: None,
            latest_payment_date: None,
            transaction_ids: None,
            pay_frequency: None,
        }
    }
}

///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum IncomeType {
    #[serde(rename = "salary")]
    Salary,
    #[serde(rename = "child support")]
    ChildSupport,
    #[serde(rename = "freelance")]
    Freelance,
    #[serde(rename = "rideshare and delivery")]
    RideshareAndDelivery,
    #[serde(rename = "social security")]
    SocialSecurity,
    #[serde(rename = "unemployment insurance")]
    UnemploymentInsurance,
    #[serde(rename = "government benefits")]
    GovernmentBenefits,
    #[serde(rename = "long term rent")]
    LongTermRent,
    #[serde(rename = "short term rent")]
    ShortTermRent,
    #[serde(rename = "ecommerce")]
    Ecommerce,
    #[serde(rename = "donations")]
    Donations,
    #[serde(rename = "interest and dividends")]
    InterestAndDividends,
    #[serde(rename = "investment")]
    Investment,
    #[serde(rename = "retirement funds")]
    RetirementFunds,
    #[serde(rename = "possible income - please verify")]
    PossibleIncomePleaseVerify,
}

impl Default for IncomeType {
    fn default() -> IncomeType {
        Self::Salary
    }
}
