/*
 * Ntropy Transaction API
 *
 * The world's most powerful, multi-geo, multi-lingual transaction categorization API.
 *
 * The version of the OpenAPI document:
 * Contact: api@ntropy.com
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct RecurrenceGroup {
    #[serde(rename = "date_of_first_tx", skip_serializing_if = "Option::is_none")]
    pub date_of_first_tx: Option<String>,
    #[serde(rename = "date_of_last_tx", skip_serializing_if = "Option::is_none")]
    pub date_of_last_tx: Option<String>,
    #[serde(rename = "frequency_in_days", skip_serializing_if = "Option::is_none")]
    pub frequency_in_days: Option<f32>,
    #[serde(
        rename = "average_amount_per_tx",
        skip_serializing_if = "Option::is_none"
    )]
    pub average_amount_per_tx: Option<f32>,
    #[serde(rename = "other_party", skip_serializing_if = "Option::is_none")]
    pub other_party: Option<String>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "transaction_ids", skip_serializing_if = "Option::is_none")]
    pub transaction_ids: Option<Vec<String>>,
}

impl RecurrenceGroup {
    pub fn new() -> RecurrenceGroup {
        RecurrenceGroup {
            date_of_first_tx: None,
            date_of_last_tx: None,
            frequency_in_days: None,
            average_amount_per_tx: None,
            other_party: None,
            id: None,
            transaction_ids: None,
        }
    }
}
