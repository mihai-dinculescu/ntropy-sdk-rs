/*
 * Ntropy Transaction API
 *
 * The world's most powerful, multi-geo, multi-lingual transaction categorization API.
 *
 * The version of the OpenAPI document:
 * Contact: api@ntropy.com
 * Generated by: https://openapi-generator.tech
 */

/// AccountHolderTransaction : A transaction for an account holder

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct AccountHolderTransaction {
    /// A unique identifier of the transaction
    #[serde(rename = "transaction_id")]
    pub transaction_id: String,
    /// The unique ID of the account holder of the transaction
    #[serde(rename = "account_holder_id", skip_serializing_if = "Option::is_none")]
    pub account_holder_id: Option<String>,
    /// The amount of the transaction
    #[serde(rename = "amount")]
    pub amount: f32,
    /// The direction of the transaction (incoming or outgoing)
    #[serde(rename = "entry_type")]
    pub entry_type: EntryType,
    /// The date that the transaction was posted. Uses ISO 8601 format (YYYY-MM-DD)
    #[serde(rename = "date")]
    pub date: Option<String>,
    /// The currency of the transaction in ISO 4217 format
    #[serde(rename = "iso_currency_code")]
    pub iso_currency_code: String,
    /// The description string of the transaction
    #[serde(rename = "description")]
    pub description: String,
    /// The country where the transaction was made in ISO 3166-2 format
    #[serde(rename = "country", skip_serializing_if = "Option::is_none")]
    pub country: Option<String>,
    #[serde(rename = "logo", skip_serializing_if = "Option::is_none")]
    pub logo: Option<String>,
    #[serde(rename = "website", skip_serializing_if = "Option::is_none")]
    pub website: Option<String>,
    #[serde(rename = "location", skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    #[serde(rename = "merchant", skip_serializing_if = "Option::is_none")]
    pub merchant: Option<String>,
    #[serde(rename = "merchant_id", skip_serializing_if = "Option::is_none")]
    pub merchant_id: Option<String>,
    #[serde(rename = "labels", skip_serializing_if = "Option::is_none")]
    pub labels: Option<Vec<String>>,
    #[serde(rename = "chart_of_accounts", skip_serializing_if = "Option::is_none")]
    pub chart_of_accounts: Option<Vec<String>>,
    #[serde(rename = "recurrence", skip_serializing_if = "Option::is_none")]
    pub recurrence: Option<Recurrence>,
    #[serde(rename = "recurrence_group", skip_serializing_if = "Option::is_none")]
    pub recurrence_group: Option<Box<crate::models::RecurrenceGroup>>,
    #[serde(
        rename = "recurrence_group_id",
        skip_serializing_if = "Option::is_none"
    )]
    pub recurrence_group_id: Option<String>,
    #[serde(rename = "person", skip_serializing_if = "Option::is_none")]
    pub person: Option<String>,
}

impl AccountHolderTransaction {
    /// A transaction for an account holder
    pub fn new(
        transaction_id: String,
        amount: f32,
        entry_type: EntryType,
        date: Option<String>,
        iso_currency_code: String,
        description: String,
    ) -> AccountHolderTransaction {
        AccountHolderTransaction {
            transaction_id,
            account_holder_id: None,
            amount,
            entry_type,
            date,
            iso_currency_code,
            description,
            country: None,
            logo: None,
            website: None,
            location: None,
            merchant: None,
            merchant_id: None,
            labels: None,
            chart_of_accounts: None,
            recurrence: None,
            recurrence_group: None,
            recurrence_group_id: None,
            person: None,
        }
    }
}

/// The direction of the transaction (incoming or outgoing)
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum EntryType {
    #[serde(rename = "incoming")]
    Incoming,
    #[serde(rename = "outgoing")]
    Outgoing,
}

impl Default for EntryType {
    fn default() -> EntryType {
        Self::Incoming
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Recurrence {
    #[serde(rename = "recurring")]
    Recurring,
    #[serde(rename = "subscription")]
    Subscription,
    #[serde(rename = "one off")]
    OneOff,
    #[serde(rename = "repeating")]
    Repeating,
}

impl Default for Recurrence {
    fn default() -> Recurrence {
        Self::Recurring
    }
}
