/*
 * Ntropy Transaction API
 *
 * The world's most powerful, multi-geo, multi-lingual transaction categorization API.
 *
 * The version of the OpenAPI document:
 * Contact: api@ntropy.com
 * Generated by: https://openapi-generator.tech
 */

use reqwest;

use super::{configuration, Error};
use crate::{apis::ResponseContent, models::AccountHolderType};

/// struct for typed errors of method [`ntropy_server_period_api_period_v2_period_get_chart_of_accounts`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum NtropyServerPeriodApiPeriodV2PeriodGetChartOfAccountsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`ntropy_server_period_api_period_v2_period_get_labels_hierarchy`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum NtropyServerPeriodApiPeriodV2PeriodGetLabelsHierarchyError {
    Status400(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`ntropy_server_period_api_period_v2_period_health_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum NtropyServerPeriodApiPeriodV2PeriodHealthGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`ntropy_server_period_api_period_v2_period_report_enrichment`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum NtropyServerPeriodApiPeriodV2PeriodReportEnrichmentError {
    Status400(),
    Status404(),
    UnknownValue(serde_json::Value),
}

/// Get the chart of accounts
pub async fn ntropy_server_period_api_period_v2_period_get_chart_of_accounts(
    configuration: &configuration::Configuration,
) -> Result<
    ::std::collections::HashMap<String, crate::models::ChartOfAccountsValue>,
    Error<NtropyServerPeriodApiPeriodV2PeriodGetChartOfAccountsError>,
> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v2/chart-of-accounts", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<NtropyServerPeriodApiPeriodV2PeriodGetChartOfAccountsError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get the hierarchy of Ntropy labels
pub async fn ntropy_server_period_api_period_v2_period_get_labels_hierarchy(
    configuration: &configuration::Configuration,
    account_holder_type: AccountHolderType,
) -> Result<
    ::std::collections::HashMap<String, crate::models::LabelsHierarchyValue>,
    Error<NtropyServerPeriodApiPeriodV2PeriodGetLabelsHierarchyError>,
> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v2/labels/hierarchy/{account_holder_type}",
        local_var_configuration.base_path,
        account_holder_type = account_holder_type.to_string()
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<NtropyServerPeriodApiPeriodV2PeriodGetLabelsHierarchyError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get the API health info.
pub async fn ntropy_server_period_api_period_v2_period_health_get(
    configuration: &configuration::Configuration,
) -> Result<(), Error<NtropyServerPeriodApiPeriodV2PeriodHealthGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/health", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<NtropyServerPeriodApiPeriodV2PeriodHealthGetError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Report a wrongly classified transaction specifying expected enrichment values.
pub async fn ntropy_server_period_api_period_v2_period_report_enrichment(
    configuration: &configuration::Configuration,
    request_body: ::std::collections::HashMap<String, serde_json::Value>,
) -> Result<(), Error<NtropyServerPeriodApiPeriodV2PeriodReportEnrichmentError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v2/report", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-API-KEY", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&request_body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<NtropyServerPeriodApiPeriodV2PeriodReportEnrichmentError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}
