/*
 * Ntropy Transaction API
 *
 * The world's most powerful, multi-geo, multi-lingual transaction categorization API.
 *
 * The version of the OpenAPI document:
 * Contact: api@ntropy.com
 * Generated by: https://openapi-generator.tech
 */

use reqwest;

use super::{configuration, Error};
use crate::apis::ResponseContent;

/// struct for typed errors of method [`ntropy_server_period_api_period_v22_period_enrich_transactions_async`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum NtropyServerPeriodApiPeriodV22PeriodEnrichTransactionsAsyncError {
    Status400(),
    Status404(crate::models::MissingAccountHoldersError),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`ntropy_server_period_api_period_v22_period_enrich_transactions_sync`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum NtropyServerPeriodApiPeriodV22PeriodEnrichTransactionsSyncError {
    Status400(),
    Status404(crate::models::MissingAccountHoldersError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`ntropy_server_period_api_period_v22_period_get_async_enrichment_result`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum NtropyServerPeriodApiPeriodV22PeriodGetAsyncEnrichmentResultError {
    Status404(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// Add a batch of transactions to the ledgers of account holders. Return the batch id that has been assigned to this batch. A batch of 100k transactions should take 5-10mins.
pub async fn ntropy_server_period_api_period_v22_period_enrich_transactions_async(
    configuration: &configuration::Configuration,
    transaction: Vec<crate::models::Transaction>,
    labeling: Option<bool>,
    create_account_holders: Option<bool>,
    model_name: Option<&str>,
) -> Result<
    crate::models::BatchResult,
    Error<NtropyServerPeriodApiPeriodV22PeriodEnrichTransactionsAsyncError>,
> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v2/transactions/async",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = labeling {
        local_var_req_builder =
            local_var_req_builder.query(&[("labeling", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = create_account_holders {
        local_var_req_builder =
            local_var_req_builder.query(&[("create_account_holders", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = model_name {
        local_var_req_builder =
            local_var_req_builder.query(&[("model_name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-API-KEY", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&transaction);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<
            NtropyServerPeriodApiPeriodV22PeriodEnrichTransactionsAsyncError,
        > = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Add transactions to the ledgers of account holders and get back enriched version of the transactions in the response. Accepts batch sizes up to 4k transactions. A single transaction should take ~100ms. A batch of 4000 transactions should take ~40s.
pub async fn ntropy_server_period_api_period_v22_period_enrich_transactions_sync(
    configuration: &configuration::Configuration,
    transaction: Vec<crate::models::Transaction>,
    labeling: Option<bool>,
    create_account_holders: Option<bool>,
    model_name: Option<&str>,
) -> Result<
    Vec<crate::models::NtropyServerApiV22EnrichTransactionsSync200ResponseInner>,
    Error<NtropyServerPeriodApiPeriodV22PeriodEnrichTransactionsSyncError>,
> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v2/transactions/sync", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = labeling {
        local_var_req_builder =
            local_var_req_builder.query(&[("labeling", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = create_account_holders {
        local_var_req_builder =
            local_var_req_builder.query(&[("create_account_holders", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = model_name {
        local_var_req_builder =
            local_var_req_builder.query(&[("model_name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-API-KEY", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&transaction);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<
            NtropyServerPeriodApiPeriodV22PeriodEnrichTransactionsSyncError,
        > = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get a result of batch transaction enrichments. The id field should be as returned by /v2/transactions/async.
pub async fn ntropy_server_period_api_period_v22_period_get_async_enrichment_result(
    configuration: &configuration::Configuration,
    id: &str,
) -> Result<
    crate::models::BatchResult,
    Error<NtropyServerPeriodApiPeriodV22PeriodGetAsyncEnrichmentResultError>,
> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v2/transactions/async/{id}",
        local_var_configuration.base_path,
        id = crate::apis::urlencode(id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-API-KEY", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<
            NtropyServerPeriodApiPeriodV22PeriodGetAsyncEnrichmentResultError,
        > = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}
